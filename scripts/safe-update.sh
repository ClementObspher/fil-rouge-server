#!/bin/bash

# Script de mise √† jour s√©curis√©e des d√©pendances
# Validation comp√©tence RNCP C4.1.1

set -e

echo "üîÑ Mise √† Jour S√©curis√©e des D√©pendances - $(date)"
echo "=================================================="

# Couleurs pour l'output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de log
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Variables
BACKUP_DIR="backup-$(date +%Y%m%d-%H%M%S)"
UPDATE_LOG="update-log-$(date +%Y%m%d-%H%M%S).md"

# Fonction de backup
create_backup() {
    log_info "Cr√©ation du backup..."
    mkdir -p "$BACKUP_DIR"
    cp package.json "$BACKUP_DIR/"
    cp bun.lock "$BACKUP_DIR/" 2>/dev/null || true
    log_success "Backup cr√©√© dans: $BACKUP_DIR"
}

# Fonction de restauration
restore_backup() {
    log_error "Restauration du backup..."
    cp "$BACKUP_DIR/package.json" .
    cp "$BACKUP_DIR/bun.lock" . 2>/dev/null || true
    log_warning "Backup restaur√© depuis: $BACKUP_DIR"
}

# Fonction de test de l'application
test_application() {
    log_info "Test de l'application..."
    
    # Test de compilation
    if ! bun run build 2>/dev/null; then
        log_warning "Pas de script build, test de compilation TypeScript..."
        if ! bunx tsc --noEmit; then
            log_error "Erreur de compilation TypeScript"
            return 1
        fi
    fi
    
    # Test de d√©marrage (timeout 10 secondes)
    log_info "Test de d√©marrage du serveur..."
    timeout 10s bun run dev > server-test.log 2>&1 &
    SERVER_PID=$!
    
    sleep 3
    
    # Test de r√©ponse HTTP
    if curl -s http://localhost:3001 > /dev/null 2>&1; then
        log_success "Serveur r√©pond correctement"
        kill $SERVER_PID 2>/dev/null || true
        return 0
    else
        log_error "Serveur ne r√©pond pas"
        kill $SERVER_PID 2>/dev/null || true
        return 1
    fi
}

# Fonction de mise √† jour s√©lective
update_dependencies() {
    local update_type="$1"
    local packages="$2"
    
    log_info "Mise √† jour $update_type: $packages"
    
    case $update_type in
        "patch")
            # Mises √† jour de patch (s√ªres)
            for package in $packages; do
                log_info "Mise √† jour patch: $package"
                if bun update "$package"; then
                    echo "‚úÖ $package mis √† jour" >> "$UPDATE_LOG"
                else
                    echo "‚ùå √âchec mise √† jour $package" >> "$UPDATE_LOG"
                    return 1
                fi
            done
            ;;
        "minor")
            # Mises √† jour mineures (avec test)
            for package in $packages; do
                log_info "Mise √† jour minor: $package"
                if bun update "$package"; then
                    if test_application; then
                        echo "‚úÖ $package mis √† jour et test√©" >> "$UPDATE_LOG"
                    else
                        log_error "Test √©chou√© apr√®s mise √† jour de $package"
                        echo "‚ùå Test √©chou√© pour $package" >> "$UPDATE_LOG"
                        return 1
                    fi
                else
                    echo "‚ùå √âchec mise √† jour $package" >> "$UPDATE_LOG"
                    return 1
                fi
            done
            ;;
        "major")
            # Mises √† jour majeures (avec analyse pr√©alable)
            log_warning "Mises √† jour majeures d√©tect√©es - Analyse manuelle requise"
            echo "‚ö†Ô∏è Mises √† jour majeures n√©cessitent une analyse manuelle:" >> "$UPDATE_LOG"
            for package in $packages; do
                echo "  - $package" >> "$UPDATE_LOG"
            done
            return 0
            ;;
    esac
}

# Fonction d'analyse des d√©pendances
analyze_dependencies() {
    log_info "Analyse des d√©pendances obsol√®tes..."
    
    # Cr√©er le fichier de log
    echo "# Rapport de Mise √† Jour - $(date)" > "$UPDATE_LOG"
    echo "" >> "$UPDATE_LOG"
    
    # Obtenir les d√©pendances obsol√®tes
    bun outdated > outdated.tmp 2>/dev/null || true
    
    if [ ! -s outdated.tmp ]; then
        log_success "Toutes les d√©pendances sont √† jour"
        echo "‚úÖ Toutes les d√©pendances sont √† jour" >> "$UPDATE_LOG"
        return 0
    fi
    
    # Analyser par type de mise √† jour
    local patch_packages=""
    local minor_packages=""
    local major_packages=""
    
    while IFS= read -r line; do
        if [[ $line =~ ^[[:space:]]*([^[:space:]]+)[[:space:]]+([^[:space:]]+)[[:space:]]+([^[:space:]]+)[[:space:]]+([^[:space:]]+) ]]; then
            package="${BASH_REMATCH[1]}"
            current="${BASH_REMATCH[2]}"
            update="${BASH_REMATCH[3]}"
            latest="${BASH_REMATCH[4]}"
            
            # D√©terminer le type de mise √† jour
            if [[ "$current" == "$update" ]]; then
                # Mise √† jour majeure
                major_packages="$major_packages $package"
            elif [[ "$update" == "$latest" ]]; then
                # Mise √† jour mineure
                minor_packages="$minor_packages $package"
            else
                # Mise √† jour de patch
                patch_packages="$patch_packages $package"
            fi
        fi
    done < outdated.tmp
    
    echo "### D√©pendances √† Mettre √† Jour" >> "$UPDATE_LOG"
    echo '```' >> "$UPDATE_LOG"
    cat outdated.tmp >> "$UPDATE_LOG"
    echo '```' >> "$UPDATE_LOG"
    echo "" >> "$UPDATE_LOG"
    
    # Appliquer les mises √† jour
    if [ -n "$patch_packages" ]; then
        update_dependencies "patch" "$patch_packages" || return 1
    fi
    
    if [ -n "$minor_packages" ]; then
        update_dependencies "minor" "$minor_packages" || return 1
    fi
    
    if [ -n "$major_packages" ]; then
        update_dependencies "major" "$major_packages"
    fi
    
    rm -f outdated.tmp
}

# Fonction de nettoyage
cleanup() {
    log_info "Nettoyage..."
    rm -f server-test.log
    rm -f outdated.tmp
}

# Fonction principale
main() {
    echo "üöÄ D√©marrage de la mise √† jour s√©curis√©e..."
    
    # V√©rifications pr√©alables
    if [ ! -f package.json ]; then
        log_error "package.json non trouv√©"
        exit 1
    fi
    
    # Cr√©er le backup
    create_backup
    
    # Test initial
    log_info "Test initial de l'application..."
    if ! test_application; then
        log_error "L'application ne fonctionne pas correctement avant mise √† jour"
        restore_backup
        exit 1
    fi
    
    # Analyser et mettre √† jour
    if analyze_dependencies; then
        log_success "Mise √† jour termin√©e avec succ√®s"
        echo "" >> "$UPDATE_LOG"
        echo "## ‚úÖ Mise √† jour termin√©e avec succ√®s" >> "$UPDATE_LOG"
    else
        log_error "√âchec de la mise √† jour"
        echo "" >> "$UPDATE_LOG"
        echo "## ‚ùå √âchec de la mise √† jour" >> "$UPDATE_LOG"
        restore_backup
        cleanup
        exit 1
    fi
    
    # Test final
    log_info "Test final de l'application..."
    if test_application; then
        log_success "Application fonctionne correctement apr√®s mise √† jour"
        echo "‚úÖ Test final r√©ussi" >> "$UPDATE_LOG"
    else
        log_error "Application ne fonctionne plus apr√®s mise √† jour"
        echo "‚ùå Test final √©chou√©" >> "$UPDATE_LOG"
        restore_backup
        cleanup
        exit 1
    fi
    
    # Nettoyage
    cleanup
    
    echo ""
    log_success "Mise √† jour s√©curis√©e termin√©e"
    echo "üìä R√©sum√©:"
    echo "- Backup cr√©√©: $BACKUP_DIR"
    echo "- Log de mise √† jour: $UPDATE_LOG"
    echo "- Tests pass√©s ‚úì"
    echo ""
    echo "üìã Prochaines √©tapes:"
    echo "1. R√©viser le log: $UPDATE_LOG"
    echo "2. Tester manuellement l'application"
    echo "3. Commiter les changements si tout est OK"
}

# Gestion des erreurs
trap 'log_error "Erreur d√©tect√©e, restauration du backup..."; restore_backup; cleanup; exit 1' ERR

# Ex√©cution
main "$@" 